/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.SIGIA.app.jdbc;

import com.SIGIA.app.dao.*;
import com.SIGIA.app.factory.*;
import java.util.Date;
import com.SIGIA.app.dto.*;
import com.SIGIA.app.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ActividadDaoImpl extends AbstractDAO implements ActividadDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idActividad, areaAfectada, accionRealizada, fecha, descripcion, idUsuario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idActividad, areaAfectada, accionRealizada, fecha, descripcion, idUsuario ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idActividad = ?, areaAfectada = ?, accionRealizada = ?, fecha = ?, descripcion = ?, idUsuario = ? WHERE idActividad = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idActividad = ?";

	/** 
	 * Index of column idActividad
	 */
	protected static final int COLUMN_ID_ACTIVIDAD = 1;

	/** 
	 * Index of column areaAfectada
	 */
	protected static final int COLUMN_AREA_AFECTADA = 2;

	/** 
	 * Index of column accionRealizada
	 */
	protected static final int COLUMN_ACCION_REALIZADA = 3;

	/** 
	 * Index of column fecha
	 */
	protected static final int COLUMN_FECHA = 4;

	/** 
	 * Index of column descripcion
	 */
	protected static final int COLUMN_DESCRIPCION = 5;

	/** 
	 * Index of column idUsuario
	 */
	protected static final int COLUMN_ID_USUARIO = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column idActividad
	 */
	protected static final int PK_COLUMN_ID_ACTIVIDAD = 1;

	/** 
	 * Inserts a new row in the Actividad table.
	 */
	public ActividadPk insert(Actividad dto) throws ActividadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdActividad() );
			stmt.setString( index++, dto.getAreaAfectada() );
			stmt.setString( index++, dto.getAccionRealizada() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getDescripcion() );
			if (dto.isIdUsuarioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdActividad( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ActividadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Actividad table.
	 */
	public void update(ActividadPk pk, Actividad dto) throws ActividadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdActividad() );
			stmt.setString( index++, dto.getAreaAfectada() );
			stmt.setString( index++, dto.getAccionRealizada() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getDescripcion() );
			if (dto.isIdUsuarioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			stmt.setInt( 7, pk.getIdActividad() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ActividadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Actividad table.
	 */
	public void delete(ActividadPk pk) throws ActividadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdActividad() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ActividadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Actividad table that matches the specified primary-key value.
	 */
	public Actividad findByPrimaryKey(ActividadPk pk) throws ActividadDaoException
	{
		return findByPrimaryKey( pk.getIdActividad() );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'idActividad = :idActividad'.
	 */
	public Actividad findByPrimaryKey(int idActividad) throws ActividadDaoException
	{
		Actividad ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idActividad = ?", new Object[] {  new Integer(idActividad) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria ''.
	 */
	public Actividad[] findAll() throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idActividad", null );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Actividad[] findByUsuario(int idUsuario) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ?", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'idActividad = :idActividad'.
	 */
	public Actividad[] findWhereIdActividadEquals(int idActividad) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idActividad = ? ORDER BY idActividad", new Object[] {  new Integer(idActividad) } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'areaAfectada = :areaAfectada'.
	 */
	public Actividad[] findWhereAreaAfectadaEquals(String areaAfectada) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE areaAfectada = ? ORDER BY areaAfectada", new Object[] { areaAfectada } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'accionRealizada = :accionRealizada'.
	 */
	public Actividad[] findWhereAccionRealizadaEquals(String accionRealizada) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE accionRealizada = ? ORDER BY accionRealizada", new Object[] { accionRealizada } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'fecha = :fecha'.
	 */
	public Actividad[] findWhereFechaEquals(Date fecha) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha = ? ORDER BY fecha", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'descripcion = :descripcion'.
	 */
	public Actividad[] findWhereDescripcionEquals(String descripcion) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE descripcion = ? ORDER BY descripcion", new Object[] { descripcion } );
	}

	/** 
	 * Returns all rows from the Actividad table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Actividad[] findWhereIdUsuarioEquals(int idUsuario) throws ActividadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ? ORDER BY idUsuario", new Object[] {  new Integer(idUsuario) } );
	}

	/**
	 * Method 'ActividadDaoImpl'
	 * 
	 */
	public ActividadDaoImpl()
	{
	}

	/**
	 * Method 'ActividadDaoImpl'
	 * 
	 * @param userConn
	 */
	public ActividadDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Actividad";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Actividad fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Actividad dto = new Actividad();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Actividad[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Actividad dto = new Actividad();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Actividad ret[] = new Actividad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Actividad dto, ResultSet rs) throws SQLException
	{
		dto.setIdActividad( rs.getInt( COLUMN_ID_ACTIVIDAD ) );
		dto.setAreaAfectada( rs.getString( COLUMN_AREA_AFECTADA ) );
		dto.setAccionRealizada( rs.getString( COLUMN_ACCION_REALIZADA ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setDescripcion( rs.getString( COLUMN_DESCRIPCION ) );
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Actividad dto)
	{
	}

	/** 
	 * Returns all rows from the Actividad table that match the specified arbitrary SQL statement
	 */
	public Actividad[] findByDynamicSelect(String sql, Object[] sqlParams) throws ActividadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ActividadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Actividad table that match the specified arbitrary SQL statement
	 */
	public Actividad[] findByDynamicWhere(String sql, Object[] sqlParams) throws ActividadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ActividadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
