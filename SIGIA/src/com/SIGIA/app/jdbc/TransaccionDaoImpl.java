/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.SIGIA.app.jdbc;

import com.SIGIA.app.dao.*;
import com.SIGIA.app.factory.*;
import java.util.Date;
import com.SIGIA.app.dto.*;
import com.SIGIA.app.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TransaccionDaoImpl extends AbstractDAO implements TransaccionDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idTransaccion, tipo, fecha, cantidad, areaDestino, solicitante, idInsumo, idUsuario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idTransaccion, tipo, fecha, cantidad, areaDestino, solicitante, idInsumo, idUsuario ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idTransaccion = ?, tipo = ?, fecha = ?, cantidad = ?, areaDestino = ?, solicitante = ?, idInsumo = ?, idUsuario = ? WHERE idTransaccion = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idTransaccion = ?";

	/** 
	 * Index of column idTransaccion
	 */
	protected static final int COLUMN_ID_TRANSACCION = 1;

	/** 
	 * Index of column tipo
	 */
	protected static final int COLUMN_TIPO = 2;

	/** 
	 * Index of column fecha
	 */
	protected static final int COLUMN_FECHA = 3;

	/** 
	 * Index of column cantidad
	 */
	protected static final int COLUMN_CANTIDAD = 4;

	/** 
	 * Index of column areaDestino
	 */
	protected static final int COLUMN_AREA_DESTINO = 5;

	/** 
	 * Index of column solicitante
	 */
	protected static final int COLUMN_SOLICITANTE = 6;

	/** 
	 * Index of column idInsumo
	 */
	protected static final int COLUMN_ID_INSUMO = 7;

	/** 
	 * Index of column idUsuario
	 */
	protected static final int COLUMN_ID_USUARIO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column idTransaccion
	 */
	protected static final int PK_COLUMN_ID_TRANSACCION = 1;

	/** 
	 * Inserts a new row in the Transaccion table.
	 */
	public TransaccionPk insert(Transaccion dto) throws TransaccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdTransaccion() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			stmt.setString( index++, dto.getAreaDestino() );
			stmt.setString( index++, dto.getSolicitante() );
			if (dto.isIdInsumoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdInsumo() );
			}
		
			if (dto.isIdUsuarioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdTransaccion( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TransaccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Transaccion table.
	 */
	public void update(TransaccionPk pk, Transaccion dto) throws TransaccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdTransaccion() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isCantidadNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			stmt.setString( index++, dto.getAreaDestino() );
			stmt.setString( index++, dto.getSolicitante() );
			if (dto.isIdInsumoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdInsumo() );
			}
		
			if (dto.isIdUsuarioNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIdUsuario() );
			}
		
			stmt.setInt( 9, pk.getIdTransaccion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TransaccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Transaccion table.
	 */
	public void delete(TransaccionPk pk) throws TransaccionDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdTransaccion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TransaccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Transaccion table that matches the specified primary-key value.
	 */
	public Transaccion findByPrimaryKey(TransaccionPk pk) throws TransaccionDaoException
	{
		return findByPrimaryKey( pk.getIdTransaccion() );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idTransaccion = :idTransaccion'.
	 */
	public Transaccion findByPrimaryKey(int idTransaccion) throws TransaccionDaoException
	{
		Transaccion ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idTransaccion = ?", new Object[] {  new Integer(idTransaccion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria ''.
	 */
	public Transaccion[] findAll() throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idTransaccion", null );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Transaccion[] findByInsumo(int idInsumo) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idInsumo = ?", new Object[] {  new Integer(idInsumo) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Transaccion[] findByUsuario(int idUsuario) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ?", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idTransaccion = :idTransaccion'.
	 */
	public Transaccion[] findWhereIdTransaccionEquals(int idTransaccion) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idTransaccion = ? ORDER BY idTransaccion", new Object[] {  new Integer(idTransaccion) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'tipo = :tipo'.
	 */
	public Transaccion[] findWhereTipoEquals(String tipo) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo = ? ORDER BY tipo", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'fecha = :fecha'.
	 */
	public Transaccion[] findWhereFechaEquals(Date fecha) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha = ? ORDER BY fecha", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'cantidad = :cantidad'.
	 */
	public Transaccion[] findWhereCantidadEquals(int cantidad) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cantidad = ? ORDER BY cantidad", new Object[] {  new Integer(cantidad) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'areaDestino = :areaDestino'.
	 */
	public Transaccion[] findWhereAreaDestinoEquals(String areaDestino) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE areaDestino = ? ORDER BY areaDestino", new Object[] { areaDestino } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'solicitante = :solicitante'.
	 */
	public Transaccion[] findWhereSolicitanteEquals(String solicitante) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE solicitante = ? ORDER BY solicitante", new Object[] { solicitante } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Transaccion[] findWhereIdInsumoEquals(int idInsumo) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idInsumo = ? ORDER BY idInsumo", new Object[] {  new Integer(idInsumo) } );
	}

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Transaccion[] findWhereIdUsuarioEquals(int idUsuario) throws TransaccionDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ? ORDER BY idUsuario", new Object[] {  new Integer(idUsuario) } );
	}

	/**
	 * Method 'TransaccionDaoImpl'
	 * 
	 */
	public TransaccionDaoImpl()
	{
	}

	/**
	 * Method 'TransaccionDaoImpl'
	 * 
	 * @param userConn
	 */
	public TransaccionDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Transaccion";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Transaccion fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Transaccion dto = new Transaccion();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Transaccion[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Transaccion dto = new Transaccion();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Transaccion ret[] = new Transaccion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Transaccion dto, ResultSet rs) throws SQLException
	{
		dto.setIdTransaccion( rs.getInt( COLUMN_ID_TRANSACCION ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setCantidad( rs.getInt( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setAreaDestino( rs.getString( COLUMN_AREA_DESTINO ) );
		dto.setSolicitante( rs.getString( COLUMN_SOLICITANTE ) );
		dto.setIdInsumo( rs.getInt( COLUMN_ID_INSUMO ) );
		if (rs.wasNull()) {
			dto.setIdInsumoNull( true );
		}
		
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Transaccion dto)
	{
	}

	/** 
	 * Returns all rows from the Transaccion table that match the specified arbitrary SQL statement
	 */
	public Transaccion[] findByDynamicSelect(String sql, Object[] sqlParams) throws TransaccionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TransaccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Transaccion table that match the specified arbitrary SQL statement
	 */
	public Transaccion[] findByDynamicWhere(String sql, Object[] sqlParams) throws TransaccionDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TransaccionDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
