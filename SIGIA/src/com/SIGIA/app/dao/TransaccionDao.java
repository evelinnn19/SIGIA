/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.SIGIA.app.dao;

import java.util.Date;
import com.SIGIA.app.dto.*;
import com.SIGIA.app.exceptions.*;

public interface TransaccionDao
{
	/** 
	 * Inserts a new row in the Transaccion table.
	 */
	public TransaccionPk insert(Transaccion dto) throws TransaccionDaoException;

	/** 
	 * Updates a single row in the Transaccion table.
	 */
	public void update(TransaccionPk pk, Transaccion dto) throws TransaccionDaoException;

	/** 
	 * Deletes a single row in the Transaccion table.
	 */
	public void delete(TransaccionPk pk) throws TransaccionDaoException;

	/** 
	 * Returns the rows from the Transaccion table that matches the specified primary-key value.
	 */
	public Transaccion findByPrimaryKey(TransaccionPk pk) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idTransaccion = :idTransaccion'.
	 */
	public Transaccion findByPrimaryKey(int idTransaccion) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria ''.
	 */
	public Transaccion[] findAll() throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Transaccion[] findByInsumo(int idInsumo) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Transaccion[] findByUsuario(int idUsuario) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idTransaccion = :idTransaccion'.
	 */
	public Transaccion[] findWhereIdTransaccionEquals(int idTransaccion) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'tipo = :tipo'.
	 */
	public Transaccion[] findWhereTipoEquals(String tipo) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'fecha = :fecha'.
	 */
	public Transaccion[] findWhereFechaEquals(Date fecha) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'cantidad = :cantidad'.
	 */
	public Transaccion[] findWhereCantidadEquals(int cantidad) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'areaDestino = :areaDestino'.
	 */
	public Transaccion[] findWhereAreaDestinoEquals(String areaDestino) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'solicitante = :solicitante'.
	 */
	public Transaccion[] findWhereSolicitanteEquals(String solicitante) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Transaccion[] findWhereIdInsumoEquals(int idInsumo) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Transaccion[] findWhereIdUsuarioEquals(int idUsuario) throws TransaccionDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Transaccion table that match the specified arbitrary SQL statement
	 */
	public Transaccion[] findByDynamicSelect(String sql, Object[] sqlParams) throws TransaccionDaoException;

	/** 
	 * Returns all rows from the Transaccion table that match the specified arbitrary SQL statement
	 */
	public Transaccion[] findByDynamicWhere(String sql, Object[] sqlParams) throws TransaccionDaoException;

}
