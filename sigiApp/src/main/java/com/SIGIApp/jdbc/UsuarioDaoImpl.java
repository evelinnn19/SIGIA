/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.SIGIApp.jdbc;

import com.SIGIApp.dto.UsuarioPk;
import com.SIGIApp.dto.Usuario;
import com.SIGIApp.exceptions.UsuarioDaoException;
import com.SIGIApp.dao.UsuarioDao;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UsuarioDaoImpl extends AbstractDAO implements UsuarioDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idUsuario, dni, nombre, correo, contrasena, rol, estado FROM " + getTableName() + "";
        
       

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idUsuario, dni, nombre, correo, contrasena, rol, estado ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idUsuario = ?, dni = ?, nombre = ?, correo = ?, contrasena = ?, rol = ?, estado = ? WHERE idUsuario = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idUsuario = ?";

	/** 
	 * Index of column idUsuario
	 */
	protected static final int COLUMN_ID_USUARIO = 1;

	/** 
	 * Index of column dni
	 */
	protected static final int COLUMN_DNI = 2;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column correo
	 */
	protected static final int COLUMN_CORREO = 4;

	/** 
	 * Index of column contrasena
	 */
	protected static final int COLUMN_CONTRASENA = 5;

	/** 
	 * Index of column rol
	 */
	protected static final int COLUMN_ROL = 6;

	/** 
	 * Index of column estado
	 */
	protected static final int COLUMN_ESTADO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column idUsuario
	 */
	protected static final int PK_COLUMN_ID_USUARIO = 1;

	/** 
	 * Inserts a new row in the Usuario table.
	 */
	public UsuarioPk insert(Usuario dto) throws UsuarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdUsuario() );
			stmt.setString( index++, dto.getDni() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getCorreo() );
			stmt.setString( index++, dto.getContrasena() );
			stmt.setString( index++, dto.getRol() );
			if (dto.isEstadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getEstado() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdUsuario( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsuarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Usuario table.
	 */
	public void update(UsuarioPk pk, Usuario dto) throws UsuarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdUsuario() );
			stmt.setString( index++, dto.getDni() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getCorreo() );
			stmt.setString( index++, dto.getContrasena() );
			stmt.setString( index++, dto.getRol() );
			if (dto.isEstadoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getEstado() );
			}
		
			stmt.setInt( 8, pk.getIdUsuario() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsuarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Usuario table.
	 */
	public void delete(UsuarioPk pk) throws UsuarioDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdUsuario() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsuarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Usuario table that matches the specified primary-key value.
	 */
	public Usuario findByPrimaryKey(UsuarioPk pk) throws UsuarioDaoException
	{
		return findByPrimaryKey( pk.getIdUsuario() );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Usuario findByPrimaryKey(int idUsuario) throws UsuarioDaoException
	{
		Usuario ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ?", new Object[] {  new Integer(idUsuario) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria ''.
	 */
	public Usuario[] findAll() throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idUsuario", null );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'idUsuario = :idUsuario'.
	 */
	public Usuario[] findWhereIdUsuarioEquals(int idUsuario) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idUsuario = ? ORDER BY idUsuario", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'dni = :dni'.
	 */
	public Usuario[] findWhereDniEquals(String dni) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE dni = ? ORDER BY dni", new Object[] { dni } );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'nombre = :nombre'.
	 */
	public Usuario[] findWhereNombreEquals(String nombre) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}
        
        public boolean findWhereNombreEqualsB(String nombre) throws UsuarioDaoException
	{
            boolean resultado = false; 
                      
		findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
                
                if(nombre.equals(findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } ))){
                    resultado = true;
                }
                System.out.println(resultado);
                
            return resultado;
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'correo = :correo'.
	 */
	public Usuario[] findWhereCorreoEquals(String correo) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE correo = ? ORDER BY correo", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'contrasena = :contrasena'.
	 */
	public Usuario[] findWhereContrasenaEquals(String contrasena) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contrasena = ? ORDER BY contrasena", new Object[] { contrasena } );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'rol = :rol'.
	 */
	public Usuario[] findWhereRolEquals(String rol) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE rol = ? ORDER BY rol", new Object[] { rol } );
	}

	/** 
	 * Returns all rows from the Usuario table that match the criteria 'estado = :estado'.
	 */
	public Usuario[] findWhereEstadoEquals(short estado) throws UsuarioDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE estado = ? ORDER BY estado", new Object[] {  new Short(estado) } );
	}

	/**
	 * Method 'UsuarioDaoImpl'
	 * 
	 */
	public UsuarioDaoImpl()
	{
	}

	/**
	 * Method 'UsuarioDaoImpl'
	 * 
	 * @param userConn
	 */
	public UsuarioDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Usuario";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Usuario fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Usuario dto = new Usuario();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Usuario[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Usuario dto = new Usuario();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Usuario ret[] = new Usuario[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Usuario dto, ResultSet rs) throws SQLException
	{
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		dto.setDni( rs.getString( COLUMN_DNI ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setContrasena( rs.getString( COLUMN_CONTRASENA ) );
		dto.setRol( rs.getString( COLUMN_ROL ) );
		dto.setEstado( rs.getShort( COLUMN_ESTADO ) );
		if (rs.wasNull()) {
			dto.setEstadoNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Usuario dto)
	{
	}

	/** 
	 * Returns all rows from the Usuario table that match the specified arbitrary SQL statement
	 */
	public Usuario[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsuarioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsuarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Usuario table that match the specified arbitrary SQL statement
	 */
	public Usuario[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsuarioDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsuarioDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
        //Métodos creados 
        
       public boolean AutenticarUsuario(String nombre, String contrasena) throws SQLException{
           boolean resultado = false;
           String databaseUsername = "";
           String databasePassword = "";
           
           
           userConn = ResourceManager.getConnection();
           
           Statement stmt = userConn.createStatement();
           String SQL = "SELECT * FROM Usuario WHERE nombre='" + nombre + "' && contrasena='" + contrasena+ "'";

            ResultSet rs = stmt.executeQuery(SQL);

            // Check Username and Password
        while (rs.next()) {
            databaseUsername = rs.getString("nombre");
            databasePassword = rs.getString("contrasena");
        }

        if (nombre.equals(databaseUsername) && contrasena.equals(databasePassword)) {
            System.out.println("Successful Login!\n----");
            resultado = true;
        } else {
        System.out.println("Incorrect Password\n----");
        }
           
           return resultado;
       }
        
        
        

}
