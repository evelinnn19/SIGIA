/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.SIGIApp.jdbc;

import com.SIGIApp.dto.Insumo;
import com.SIGIApp.dto.InsumoPk;
import com.SIGIApp.exceptions.InsumoDaoException;
import com.SIGIApp.dao.InsumoDao;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class InsumoDaoImpl extends AbstractDAO implements InsumoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idInsumo, nombre, categoria, stockActual, stockMinimo, critico FROM " + getTableName() + "";
        
	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idInsumo, nombre, categoria, stockActual, stockMinimo, critico ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idInsumo = ?, nombre = ?, categoria = ?, stockActual = ?, stockMinimo = ?, critico = ? WHERE idInsumo = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idInsumo = ?";

	/** 
	 * Index of column idInsumo
	 */
	protected static final int COLUMN_ID_INSUMO = 1;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 2;

	/** 
	 * Index of column categoria
	 */
	protected static final int COLUMN_CATEGORIA = 3;

	/** 
	 * Index of column stockActual
	 */
	protected static final int COLUMN_STOCK_ACTUAL = 4;

	/** 
	 * Index of column stockMinimo
	 */
	protected static final int COLUMN_STOCK_MINIMO = 5;

	/** 
	 * Index of column critico
	 */
	protected static final int COLUMN_CRITICO = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column idInsumo
	 */
	protected static final int PK_COLUMN_ID_INSUMO = 1;

	/** 
	 * Inserts a new row in the Insumo table.
	 */
	public InsumoPk insert(Insumo dto) throws InsumoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdInsumo() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getCategoria() );
			stmt.setInt( index++, dto.getStockActual() );
			stmt.setInt( index++, dto.getStockMinimo() );
			stmt.setShort( index++, dto.getCritico() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdInsumo( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsumoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the Insumo table.
	 */
	public void update(InsumoPk pk, Insumo dto) throws InsumoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdInsumo() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getCategoria() );
			stmt.setInt( index++, dto.getStockActual() );
			stmt.setInt( index++, dto.getStockMinimo() );
			stmt.setShort( index++, dto.getCritico() );
			stmt.setInt( 7, pk.getIdInsumo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsumoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the Insumo table.
	 */
	public void delete(InsumoPk pk) throws InsumoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdInsumo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsumoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the Insumo table that matches the specified primary-key value.
	 */
	public Insumo findByPrimaryKey(InsumoPk pk) throws InsumoDaoException
	{
		return findByPrimaryKey( pk.getIdInsumo() );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Insumo findByPrimaryKey(int idInsumo) throws InsumoDaoException
	{
		Insumo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idInsumo = ?", new Object[] {  new Integer(idInsumo) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria ''.
	 */
	public Insumo[] findAll() throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idInsumo", null );
	}
        
	/** 
	 * Returns all rows from the Insumo table that match the criteria 'idInsumo = :idInsumo'.
	 */
	public Insumo[] findWhereIdInsumoEquals(int idInsumo) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idInsumo = ? ORDER BY idInsumo", new Object[] {  new Integer(idInsumo) } );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'nombre = :nombre'.
	 */
	public Insumo[] findWhereNombreEquals(String nombre) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'categoria = :categoria'.
	 */
	public Insumo[] findWhereCategoriaEquals(String categoria) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE categoria = ? ORDER BY categoria", new Object[] { categoria } );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'stockActual = :stockActual'.
	 */
	public Insumo[] findWhereStockActualEquals(int stockActual) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stockActual = ? ORDER BY stockActual", new Object[] {  new Integer(stockActual) } );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'stockMinimo = :stockMinimo'.
	 */
	public Insumo[] findWhereStockMinimoEquals(int stockMinimo) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE stockMinimo = ? ORDER BY stockMinimo", new Object[] {  new Integer(stockMinimo) } );
	}

	/** 
	 * Returns all rows from the Insumo table that match the criteria 'critico = :critico'.
	 */
	public Insumo[] findWhereCriticoEquals(short critico) throws InsumoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE critico = ? ORDER BY critico", new Object[] {  new Short(critico) } );
	}

	/**
	 * Method 'InsumoDaoImpl'
	 * 
	 */
	public InsumoDaoImpl()
	{
	}

	/**
	 * Method 'InsumoDaoImpl'
	 * 
	 * @param userConn
	 */
	public InsumoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "Insumo";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Insumo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Insumo dto = new Insumo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Insumo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Insumo dto = new Insumo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Insumo ret[] = new Insumo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
        

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Insumo dto, ResultSet rs) throws SQLException
	{
		dto.setIdInsumo( rs.getInt( COLUMN_ID_INSUMO ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setCategoria( rs.getString( COLUMN_CATEGORIA ) );
		dto.setStockActual( rs.getInt( COLUMN_STOCK_ACTUAL ) );
		dto.setStockMinimo( rs.getInt( COLUMN_STOCK_MINIMO ) );
		dto.setCritico( rs.getShort( COLUMN_CRITICO ) );
	}
      
	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Insumo dto)
	{
	}

	/** 
	 * Returns all rows from the Insumo table that match the specified arbitrary SQL statement
	 */
	public Insumo[] findByDynamicSelect(String sql, Object[] sqlParams) throws InsumoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsumoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the Insumo table that match the specified arbitrary SQL statement
	 */
	public Insumo[] findByDynamicWhere(String sql, Object[] sqlParams) throws InsumoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new InsumoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
        
        public Insumo buscarInsumoNombre(String nombreInsumo) throws SQLException{
            
           Insumo resultado = new Insumo();
            
        
           userConn = ResourceManager.getConnection();
           
           Statement stmt = userConn.createStatement();
           String SQL = "SELECT * FROM Usuario WHERE nombre='" + nombreInsumo + " ";
           
           ResultSet rs = stmt.executeQuery(SQL);
           
           return resultado = fetchSingleResult(rs);
            
        }

}
